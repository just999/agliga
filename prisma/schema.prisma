// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  phone           String?
  bank            String?   @default("NONEBANK")
  game            String[]  @default(["Sbobet"])
  accountNumber   String?   @default("0000000000")
  image           String?   @default("/images/cavatar.svg")
  password        String?
  hashedPassword  String?
  profileComplete Boolean   @default(false)
  active          Boolean   @default(true)
  role            Role      @default(user)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  editorId        String?   @db.ObjectId
  editor          User?     @relation("UserEditor", fields: [editorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  supervisees     User[]    @relation("UserEditor")

  favoriteIds String[]  @db.ObjectId
  accounts    Account[]
  // listings       Listing[]
  // reservations   Reservation[]
  depos       Depo[]    @relation("UserDepos")
  wds         Wd[]      @relation("UserWds")
  posts       Post[]
  comments    Comment[]
  sliders     Slider[]
  Euro        Euro[]
  Fixture     Fixture[]
  EPL2324     EPL2324[]
  EPL2223     EPL2223[]
  EPL2122     EPL2122[]
  EPL2425     EPL2425[]

  adminDepos         Depo[]   @relation("AdminDepos")
  adminWds           Wd[]     @relation("AdminWds")
  isTwoFactorEnabled Boolean?

  twoFactorConfirmation TwoFactorConfirmation?
  senderMessages        Message[]              @relation("sender")
  recipientMessages     Message[]              @relation("recipient")
  sourceLikes           Like[]                 @relation("source")
  targetLikes           Like[]                 @relation("target")
  photos                Photo[]
}

model Message {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  text             String
  senderId         String?   @db.ObjectId
  recipientId      String?   @db.ObjectId
  sender           User?     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  recipient        User?     @relation("recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  dateRead         DateTime?
  senderDeleted    Boolean   @default(false)
  recipientDeleted Boolean   @default(false)

  created DateTime @default(now())
}

model Token {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String    @unique
  expires DateTime
  type    TokenType

  @@unique([email, token])
}

enum TokenType {
  VERIFICATION
  PASSWORD_RESET
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Depo {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String?
  bank          String
  accountNumber String
  name          String
  depoAmount    Int?
  game          String    @default("SBOBET")
  gameUserId    String
  status        String?   @default("new")
  bankPT        String
  adminId       String?   @db.ObjectId
  admin         User?     @relation("AdminDepos", fields: [adminId], references: [id])
  userId        String?   @db.ObjectId
  user          User?     @relation("UserDepos", fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

model Wd {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String?
  bank          String
  accountNumber String
  name          String
  game          String    @default("SBOBET")
  gameUserId    String
  wdAmount      Int?
  status        String?   @default("new")
  adminId       String?   @db.ObjectId
  admin         User?     @relation("AdminWds", fields: [adminId], references: [id])
  userId        String?   @db.ObjectId
  user          User?     @relation("UserWds", fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

model Post {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  img      String?
  category String
  date     DateTime @default(now())
  title    String
  brief    String?
  avatar   String   @default("/images/cavatar.svg")
  author   String?
  userId   String?  @db.ObjectId
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  top      Boolean? @default(false)
  trending Boolean? @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  comments  Comment[]
  topic     Topic     @relation(fields: [topicId], references: [id])
  topicId   String    @db.ObjectId
}

model Topic {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  slug        String @unique
  description String
  posts       Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  content  String
  postId   String  @db.ObjectId
  userId   String  @db.ObjectId
  parentId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Comment?  @relation("Comments", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  children Comment[] @relation("Comments")
}

model Schedule {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  run      Int
  date     DateTime
  teamAway String
  score    String   @default("VS")
  teamHome String
  analysis String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Slider {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  images String
  userId String @db.ObjectId

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Group {
  A
  B
  C
  D
  E
  F
}

type Team {
  value  String
  icon   String
  played Int?
  group  String?
}

type Penalty {
  redCard     String?
  yellowCard  String?
  penaltyKick String?
}

model Euro {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  category     String?
  date         DateTime
  euroTeamHome Team
  homePenalty  String[] @default([""])
  homeScore    String?
  homeHTScore  String?
  euroTeamAway Team
  awayPenalty  String[] @default([""])
  awayScore    String?
  awayHTScore  String?
  group        Group?
  round        String?
  qRound       String?
  userId       String   @db.ObjectId

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Fixture {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  category    String?
  name        String
  date        DateTime
  teamHome    String?
  homePenalty String[] @default([""])
  homeScore   String?
  homeHTScore String?
  teamAway    String?
  awayPenalty String[] @default([""])
  awayScore   String?
  awayHTScore String?
  group       Group?
  week        Int?
  userId      String   @db.ObjectId

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EPL2324 {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  category    String?
  name        String
  date        DateTime
  teamHome    String?
  homePenalty String[] @default([""])
  homeScore   String?
  homeHTScore String?
  teamAway    String?
  awayPenalty String[] @default([""])
  awayScore   String?
  awayHTScore String?
  group       Group?
  week        Int?
  userId      String   @db.ObjectId

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EPL2223 {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  category    String?
  name        String
  date        DateTime
  teamHome    String?
  homePenalty String[] @default([""])
  homeScore   String?
  homeHTScore String?
  teamAway    String?
  awayPenalty String[] @default([""])
  awayScore   String?
  awayHTScore String?
  group       Group?
  week        Int?
  userId      String   @db.ObjectId

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EPL2122 {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  category    String?
  name        String
  date        DateTime
  teamHome    String?
  homePenalty String[] @default([""])
  homeScore   String?
  homeHTScore String?
  teamAway    String?
  awayPenalty String[] @default([""])
  awayScore   String?
  awayHTScore String?
  group       Group?
  week        Int?
  userId      String   @db.ObjectId

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EPL2425 {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  category    String?
  name        String
  date        DateTime
  teamHome    String?
  homePenalty String[] @default([""])
  homeScore   String?
  homeHTScore String?
  teamAway    String?
  awayPenalty String[] @default([""])
  awayScore   String?
  awayHTScore String?
  group       Group?
  week        Int?
  userId      String   @db.ObjectId

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  sourceUserId String @db.ObjectId
  sourceUser   User   @relation("source", fields: [sourceUserId], references: [id], onDelete: Cascade)

  targetUserId String @db.ObjectId
  targetUser   User   @relation("target", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@unique([sourceUserId, targetUserId])
}

model Photo {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  publicId   String?
  isApproved Boolean @default(false)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
